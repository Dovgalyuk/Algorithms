/*
Задача №5:
----------------------------------------------------------
Дана последовательность чисел X1, X2, ..., Xn.
Требуется вычеркнуть минимальное число цифр так, чтобы
оставшиеся шли в порядке возрастания.
На экран выводится число невычеркнутых цифр, а затем сама
последовательность.
----------------------------------------------------------
*/

#include "stdafx.h"
#include <iostream>
#include <vector>

using namespace std;

vector<int> output;								//Вектор итоговой последовательности.
vector<int> tmp;								//Вектор возможной последовательности.

void processing(vector<int>& input, int i)
{
	int position = -1;

	/*Проверяем, если получившаяся последовательность будет по длине больше
	итоговой или равно ей, и индекс следующего числа лежит
	за рамками массива, то перезаписываем итоговую последовательность.
	*/
	if (i >= input.size())
	{
		if (tmp.size() >= output.size())
		{
			output.resize(tmp.size());

			for (int i = 0; i < tmp.size(); i++)
			{
				output.push_back(tmp[i]);
			}
		}
	}
	else
	{
		//Сохраняем число.
		tmp.push_back(input[i]);

		//Рассматриваем числа со следующей позиции.
		int j = i + 1;

		//Ищем позицию числа, которое будет образовывать возрастающую последовательность с предыдущим.
		while (j < input.size())
		{
			if (tmp[tmp.size() - 1] < input[j])
			{
				position = j;
				break;
			}

			++j;
		}

		/*Если такого числа нет, то есть мы прошлись по всему массиву,
		то проверяем, если получившаяся последовательность будет по длине больше
		итоговой или равно ей, то перезаписываем итоговую последовательность.
		*/
		if (j == input.size())
		{
			if (tmp.size() >= output.size())
			{
				output.resize(tmp.size());

				for (int i = 0; i < tmp.size(); i++)
				{
					output[i] = tmp[i];
				}

				tmp.resize(tmp.size() - 1);
				return;
			}
		}

		/*Если же последовательность получилась по длине маленькая, и такой позиции
		не нашлось, то возвращаемся, стирая элементы по дороге из временного массива.
		*/
		if (position == -1)
		{
			tmp.resize(tmp.size() - 1);
			return;
		}


		//Если такая позиция нашлась, то берём это число и повторяем те же действия.
		processing(input, position);

		if (tmp.size() != 0)
		{
			tmp.resize(tmp.size() - 1);
		}

		/*Теперь, стирая число, которое мы сохранили до этого, берём следующее
		после рассматриваемого и повторяем те же действия.
		*/
		processing(input, i + 1);

		if (tmp.size() != 0)
		{
			tmp.resize(tmp.size() - 1);
		}
	}
}

int main()
{
	size_t N;							//Цисло цифр.

	cin >> N;								

	vector<int> input(N);				//Исходная последовательность чисел.

	for (size_t i = 0; i < N; i++)
	{
		cin >> input[i];
	}

	/*Находим позицию числа, которое может образовать возрастающую последовательность 
	хотя бы из двух чисел, и рассматриваем числа, начиная с этой позиции.
	*/
	for (size_t i = 0; i < N - 1; i++)
	{
		if (input[i] > input[i + 1])
		{
			continue;
		}

		processing(input, i);
		break;
	}

	//Выводим число невычеркнутых чисел.
	cout << output.size() << endl;

	//Выводим итоговую последовательность.
	for (size_t i = 0; i < output.size(); i++)
	{
		cout << output[i] << " ";
	}

	cout << endl;
	system("Pause");
	return 0;
}
