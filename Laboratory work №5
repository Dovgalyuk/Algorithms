// Возрастающая последовательность.cpp: определяет точку входа для консольного приложения.
//

#include "stdafx.h"
#include <iostream>
#include <vector>
#include <list>

using namespace std;

int main()
{
	size_t N;									//Количество цифр.

	//Считываем количество цифр.
	cin >> N;

	vector<int> input(N);						//Массив с изначальной последовательностью.
	vector<int> length(N, 1);					//Массив длин наибольшей последовательности.
	vector<int> indexs(N, -1);					//Массив индексов следующего элемента в длинной последовательности.

	//Считываем саму последовательность.
	for (size_t i = 0; i < N; i++)
	{
		cin >> input[i];
	}

	int MaxLength;								//Наибольшая длина последовательности.
	int IndexMax;								//Индекс последнего элемента самой длинной последовательности.

	MaxLength = 1;								//Наибольшая длина в последовательности на данный момент.
	IndexMax = 0;								//Индекс последнего элемента в самой длинной последовательности наданный момент.

	for (int i = 1; i < N; i++)
	{
		indexs[i] = 0;

		for (int j = i - 1; j >= 0; j--)
		{
			/*Если значение j - го элемента будет меньше i - го, и его длина будет меньше или равно i - ому, то
			записываем этот элемент в последовательность, прибавляя длину на единицу и записываем его индекс
			в конец последовательности*/
			if ((input[j] < input[i]) && (length[j] >= length[i]))
			{
				length[i] = length[j] + 1;
				indexs[i] = j;

				/*Если длина этой последовательности окажется больше максимальной, то
				теперь эта последовательность будет являться самой длинной и последний индекс последовательности
				будет перезаписан на тот, который мы добавили*/
				if (length[i] > MaxLength)
				{
					MaxLength = length[i];
					IndexMax = i;
				}
			}
		}
	}

	int x = IndexMax;
	vector<int> result;						//Окончательная последовательность в зеркальном виде.

	//Восстанавливаем последовательность, которая будет храниться в массиве зеркально.
	do
	{
		if (input.size() == 1)
		{
			cout << input.size() << endl;
			cout << input[0] << endl;
			system("Pause");
			return 0;
		}

		result.push_back(input[x]);
		x = indexs[x];

	} while (x != -1);

	if (IndexMax == 0)
	{
		cout << "IMPOSSIBLE" << endl;
		system("Pause");
		return 0;
	}
	else if (result[result.size() - 1] > result[result.size() - 2])
	{
		result.resize(result.size() - 1);
	}

	//Выводим число невычеркнутых чисел.
	cout << result.size() << endl;

	//Выводим последовательность в порядке возрастания.
	for (int i = result.size() - 1; i >= 0; i--)
	{
		cout << result[i] << " ";
	}

	cout << endl;
	system("Pause");
	return 0;
}
